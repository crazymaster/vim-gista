*vim-gista.txt* A plugin which helps user to manipulate gists

Version: 1.0
Author:  Alisue <lambdalisue@hashnote.net>					*vim-gista-author*
License: MIT license  {{{
	Copyright (c) 2014 Alisue, hashnote.net

	Permission is hereby granted, free of charge, to any person obtaining a
	copy of this software and associated documentation files (the "Software"),
	to deal in the Software without restriction, including without limitation
	the rights to use, copy, modify, merge, publish, distribute, sublicense,
	and/or sell copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
	THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.
}}}

==============================================================================
CONTENTS												*vim-gista-contents*

Introduction					|vim-gista-introduction|
Install							|vim-gista-install|
Usage							|vim-gista-usage|
	Authentication					|vim-gista-usage-authentication|
	Listing							|vim-gista-usage-listing|
	Opening							|vim-gista-usage-opening|
	Posting							|vim-gista-usage-posting|
	Editing							|vim-gista-usage-editing|
	Deleting						|vim-gista-usage-deleting|
	Star/Unstar						|vim-gista-usage-star|
	Forking							|vim-gista-usage-forking|
	Browsing		   				|vim-gista-usage-browsing|


==============================================================================
INTRODUCTION										*vim-gista-introduction*

*vim-gista* is a plugin for manipulating Gists.
It provide the following features:

1.	Listing gists
	-	Authenticated user's gist entries
	-	Authenticated user's starred gist entries
	-	Gist entries of a particular user
	-	Gist entries in Gist web
	-	Listing gist entries in Unite (require 'Shougo/unite.vim')
2.	Opening gists
	-	Open files of an authenticated user in |modifiable| buffers
	-	Open files of a particular user in |nomodifiable| buffers
	-	Open files of a gist with a browser (require 'tyru/open-browser.vim')
3.	Posting gists
	-	Create a new gist from a current buffer
	-	Create a new gist from all opened+listed+visible buffers
4.	Editing gists
	-	A file content of a gist
	-	A description of a gist
	-	Rename a file of a gist
	-	Remove a file of a gist
5.	Deleting gists
6.	Giving/taking a star to a gist
7.	Forking a gist

The original concepts and strategies are taken from 'mattn/gist.vim'; however
the most of these are aggressively modified to establish vim-gista new
implementations.

References:
-   Gist: https://gist.github.com/
-   mattn/gist.vim: https://github.com/mattn/gist-vim
-   Shougo/unite.vim: https://github.com/Shougo/unite.vim
-   tyru/open-browser.vim: https://github.com/tyru/open-browser.vim


==============================================================================
INSTALL													*vim-gista-install*

First of all, |vim-gista| use 'cURL' or 'wget' to communicate with Gist API
thus make sure that one of those commands is available in your system.

-   cURL - http://curl.haxx.se/
-   Wget - https://www.gnu.org/software/wget/

The repository (https://github.com/lambdalisue/vim-gista) follow a standard
vim plugin's directory structure thus you can use Vundle.vim or neobundle.vim
to install |vim-gista| like:
>
	" Vundle.vim
	Plugin 'lambdalisue/vim-gista'

	" neobundle.vim
	NeoBundle 'lambdalisue/vim-gista'

	" neobundle.vim (Lazy)
	NeoBundleLazy 'lambdalisue/vim-gista', {
		\ 'autoload': {
		\	'commands': ['Gista'],
		\	'mappings': '<Plug>(gista-',
		\	'unite_sources': 'gista',
		\}}
<
Additionally, |vim-gista| require 'Shougo/unite.vim' and 'tyru/open-browser.vim'
to enable all features thus make sure that these plugins are loaded before the
plugins like:
>
	" Vundle.vim
	Plugin 'Shougo/unite.vim'
	Plugin 'tyru/open-browser.vim'
	Plugin 'lambdalisue/vim-gista'

	" neobundle.vim
	NeoBundle 'lambdalisue/vim-gista', {
		\ 'depends': [
		\	'Shougo/unite.vim',
		\	'tyru/open-browser.vim',
		\]}

	" neobundle.vim (Lazy)
	NeoBundleLazy 'lambdalisue/vim-gista', {
		\ 'depends': [
		\	'Shougo/unite.vim',
		\	'tyru/open-browser.vim',
		\ ],
		\ 'autoload': {
		\	'commands': ['Gista'],
		\	'mappings': '<Plug>(gista-',
		\	'unite_sources': 'gista',
		\}}
<
If you are not using any vim plugin manager, you can copy the repository to
your $VIM directory to enable the plugin but I really recommend you to try one
of those vim plugin managers.

Once you installed |vim-gista|, specify your GitHub username to
|g:gista#github_user| variable like the code below. |vim-gista| use that
username in API authentication step.
>
	let g:gista#github_user = 'your GitHub user name'
<
If nothing is specified to |g:gista#github_user| or |g:github_user|,
|vim-gista| try to get your username from git profile ('github.user') thus you
can specify your username in git command like:
>
	$ git config --global github.user <your GitHub user name>
<

==============================================================================
USAGE														*vim-gista-usage*

------------------------------------------------------------------------------
Authentication								*vim-gista-usage-authentication*

If you execute any |vim-gista| commands, functions, or mappings, |vim-gista|
ask you to fill your GitHub password (or your GitHub username if you have not
specified it yet) at first time.
The filled password will be used to create a new personal access token for
|vim-gista| and the created personal access token is saved in your file
system (the filled password will never be stored.)

If you prefer to specify a personal access token directory, call
|gista#gist#raw#login()| like below and input your personal access token as a
username:
>
	:call gista#gist#raw#login('', {'use_default_username': 0})
<
If you want to temporary logout, call |gista#gist#raw#logout()| without any
arguments. If you want to logout permanently, call the function with a
argument like below:
>
	:call gista#gist#raw#logout({'permanently': 1})
<
If will delete a stored personal access token from your file system.


------------------------------------------------------------------------------
Listing										*vim-gista-usage-listing*

To list your public and private gist entries, run one of the following
commands (short form or long form):
>
	:Gista -l
	:Gista --list
<
It will recursively download your gist entries at first time thus you may need
to be really patient if you have tons of gists. The entries are cached and the
cache will be used for rest of the processions. These cache will be updated
automatically when there are any new or modified gists.

Once all your gist entries are downloaded, a buffer named 'gista:list' will be
opened. You can manipulate your gists with following keys (See
|g:gista#enable_default_mappings|.)

*vim-gista-default-mappings*

	<F1>		:<C-u>help vim-gista-default-mappings<CR>
	<C-l>		|<Plug>(gista-action-update)|
	<C-l><C-l>	|<Plug>(gista-action-update-nocache)|
	<CR>		|<Plug>(gista-action-open)|
	<S-CR>		|<Plug>(gista-action-browser)|
	+			|<Plug>(gista-action-star)|
	-			|<Plug>(gista-action-unstar)|
	?			|<Plug>(gista-action-is-starred)|
	r			|<Plug>(gista-action-rename)|
	D			|<Plug>(gista-action-smart-delete)|
	F			|<Plug>(gista-action-fork)|
	e			|<Plug>(gista-action-edit)|
	s			|<Plug>(gista-action-split)|
	v			|<Plug>(gista-action-vsplit)|
	b			|<Plug>(gista-action-browser)|

If you want to list a particular user's gist entries, give the username to the
command like:
>
	:Gista -l lambdalisue
	:Gista --list lambdalisue
<
If you specify 'starred' or 'public' like a username, you will see starred
gist entries of your GitHub account or public gist entries in Gist web
respectively:
Note: Public gist entries are not downloaded recursively and not cached, due
to the amount of the gists.
>
	:Gista -l starred
	:Gista -l public
<
You can specify a particular page with '--page PAGE' option. When the page is
specified, gist entries existing in the page will be downloaded (and never be
recursively downloaded and cached.)
>
	:Gista -l --page 2
<
If you want to refresh the gist entries (check update and download new or 
modified gist entries), hit <C-l> (|<Plug>(gista-action-update)|) on the
'gist:list' buffer.
If you want to re-build a cache of your gist entries, use '--nocache' option
then all gist entries are recursively re-downloaded and the cache will be
rebuilded by the new downloads.
>
	:Gista -l --nocache
<
Or hit <C-l><C-l> (|<Plug>(gista-action-update-nocache)|) on the 'gist:list'
buffer.

------------------------------------------------------------------------------
Opening										*vim-gista-usage-opening*

If you want to open a gist on the 'gist:list' buffer, hit <CR> to open the
gist with default opener (See |g:gista#gist_defaut_opener| and
|g:gista#gist_default_opener_in_action|.) If you want to specify the way to
open the buffer, hit e, s, or v for 'edit', 'split', or 'vsplit' respectively.

If you are the owner of the gist, the gist will be opened in |modifiable|
buffer, otherwise it will be opened in |nomodifiable| buffer. The buffer will
automatically be connected to the gist. If a buffer is connected to a gist,
you can get the gist informations with (the following functions are assumed to
be used in statusline):
>
	:echo gista#statusline#components#gistid()		" return Gist ID
	:echo gista#statusline#components#filename()	" return filename
	:echo gista#statusline#components#gistinfo()	" return both

Or if the buffer is |modifiable|, you can upload changes on the buffer with
posting commands like (See |g:gista#update_on_write| for more details):
>
	" Short
	:Gista
	" Long
	:Gista --post
	" g:gista#update_on_write = 1
	:w
	" g:gista#update_on_write = 2
	:w!
<
If you provide a new filename with |:write| command, the buffer will be
disconnected from the gist and you will get a new local copy of the gist.
>
	:w a_new_filename.txt
<
Or if you just want to disconnect, use the following command then the buffer
will be liberate from the gist.
>
	:Gista --disconnect

You can open a particular gist via Gist ID as well. Provide a Gist ID with
'--gistid' option and open the gist like:
>
	:Gista -o --gistid XXXXXXXXXX
	:Gista --open --gistid XXXXXXXX
<
Then all files in the gist will be opened with default opener (See
|g:gista#gist_defaut_opener|.) If you want to open particular files, you can
specify filenames with '--filename' option as a semi-colon separated filenames
like:
>
	:Gista -o --gistid XXXXXXXX --filename "A.txt;B.txt;C.txt"
<
------------------------------------------------------------------------------
Posting										*vim-gista-usage-posting*

If you want to create a new gist, execute one of the commands below. The
commands will create a new gist with a content (or selected content) of a
current buffer:
>
	:Gista
	:Gista --post
	:'<.'>Gista
	:'<.'>Gista --post
<
After you create a new gist, the current buffer will be connected to the gist
(See |g:gista#auto_connect_after_post| and |vim-gista-usage-opening|).

If the current buffer is already connected to a gist or a Gist ID is written
in the content (in 'GistID: XXXXXXXX' format) or is specified with '--gistid'
option, the command will save changes rather than posting as a new gist.

If you want to specify a description in the command, use '-d' or
'--description' option to specify:
>
	:Gista -d "Description with a short option"
	:Gista --description "Description with a long option"
<
If you want to specify a visibility, use '-p' or '--private' to make the
gist private, use '-P' or '--public' to make the gist public (the default
visibility is determined from the value of |g:gista#post_private|.
Note: Gist API does not provide a way to modify the visibility of an existing
gist thus you cannot change the visibility of a gist in vim-gista interface.
>
	:Gista -p -d "This is a private gist"
	:Gista --private -d "This is a private gist"
	:Gista -P -d "This is a public gist"
	:Gista --public -d "This is a public gist"
<
If you want to update the gist as an anonymous gist, use '--anonymous'
option
>
	:Gista --anonymous
<
If you want to create a new gist with all opened buffer. Specify '--multiple'
to the command like
>
	:Gista --multiple
<
Again, if the gist ID is specified to the command, the command will post all
opened buffer to the specified gist (it will replace the content if a same
filename file exists on the gist).

------------------------------------------------------------------------------
Editing										*vim-gista-usage-editing*

If the current buffer is connected to the gist (if you open or post the gist),
all changes you saved will be uploaded to the gist (See
|g:gista#update_on_write|).
If you want to update the changes via a command, see |vim-gista-usage-posting|
section.

											*vim-gista-usage-renaming*
If you want to rename the filename, hit 'r' (|<Plug>(gista-action-rename)|) on
the target file in the gist:list buffer.
Or if you want to rename the filename of the gist connected to the current
buffer, use the command below:
>
	:Gista --rename
	:Gista --rename NEW_FILENAME
<
If you don't specify a new filename, vim-gista will ask it.

											*vim-gista-usage-removing*
If you want to remove a file, hit 'D' (|<Plug>(gista-action-smart-delete)| or
|<Plug>(gista-action-remove)|) on the target file in the gist:list buffer.
Or if you want to remove the file of the gist connected to the current buffer,
use the command below:
>
	:Gista --remove
<
Remove command cannot be undone thus confirmation dialog will comes up.


------------------------------------------------------------------------------
Deleting									*vim-gista-usage-deleting*

If you want to delete a gist, hit 'D' (|<Plug>(gista-action-smart-delete)| or
|<Plug>(gista-action-delete)|) on the target gist in the gist:list buffer.
Or if you want to delete the gist connected to the current buffer, use the
command below:
>
	:Gista --delete
<
Delete command cannot be undone thus confirmation dialog will comes up.

------------------------------------------------------------------------------
Star/Unstar									*vim-gista-usage-star*
											*vim-gista-usage-unstar*
If you want to star/unstar a gist, hit '+' or '-' (|<Plug>(gista-action-star)|
or |<Plug>(gista-action-unstar)|) on the target gist in the gist:list buffer.
Or if you want to star/unstar the gist connected to the current buffer, use
the commands below:
>
	:Gista --star
	:Gista --unstar
<
If you want to display if the gist is starred, use the following command or
hit '?' (|<Plug>(gista-action-is-starred)|) in the gist:list buffer.
>
	:Gista --is-starred
<

------------------------------------------------------------------------------
Forking										*vim-gista-usage-forking*

If you want to fork a gist, hit 'F' (|<Plug>(gista-action-fork)|) on the target
gist in the gist:list buffer.
Or if you want to fork the gist connected to the current buffer, use the
command below:
>
	:Gista --fork
<

------------------------------------------------------------------------------
Browsing										*vim-gista-usage-browsing*

If you want to browse a gist in your browser, hit 'b'
(|<Plug>(gista-action-browse)|) on the target gist in the gist:list buffer.
Or if you want to browse the gist connected to the current buffer, use one of
the commands below:
>
	:Gista -b
	:Gista --browse
<
This feature require 'tyru/open-browser.vim'


==============================================================================
INTERFACE												*vim-gista-interface*

------------------------------------------------------------------------------
Options											*vim-gista-interface-options*

														*g:gista#github_user*
g:gista#github_user
	A username of your GitHub account. If this value is not specified,
	vim-gista try to determine your username from

	1.	A value of g:github_user
	2.	A git profile (See |vim-gista-install| section)

														*g:gista#gist_api_url*
g:gista#gist_api_url
	A Gist API url. If this value is not specified, vim-gista try to determine
	it from g:gist_api_url.
	The default value is 'https://gist.github.com'

															*g:gista#directory*
g:gista#directory
	Specify a directory to store vim-gista configurations.
	The default value is expand('~/.gista/'); the absolute path of it.

													*g:gista#token_directory*
g:gista#token_directory
	Specify a directory to store a GitHub access token of vim-gista.
	The default value is |g:gista#directory| . 'tokens/'

										*g:gista#gist_entries_cache_directory*
g:gista#gist_entries_cache_directory
	Specify a directory to store a cached gist entries.
	The default value is |g:gista#directory| . 'gists/'

													*g:gist_default_filename*
g:gista#gist_default_filename
	A defaut filename used for posting a gist if the buffer does not have a
	filename.
	The default value is 'gist-file'.

	Note:
	'gistfile' (a name used in 'mattn/gist.vim') is not recommended while
	GitHub Inc. does not recommended. See a Gist API web page for the
	detail.

														*g:gista#list_opener*
g:gista#list_opener
	The open command to use open a gist list window.
	The default value is 'topleft 20 split +set\ winfixheight'.

														*g:gista#gist_openers*
g:gista#gist_openers
	The open command dictionary to use open a gist.
	The default value is:
>
		let g:gista#gist_opener = {
			\ 'edit': 'edit',
			\ 'split': 'rightbelow split',
			\ 'vsplit': 'rightbelow vsplit',
			\}
<

											*g:gista#gist_openers_in_action*
g:gista#gist_openers_in_action
	The open command to use open a gist, used in the gist list window
	The default value is equal to |g:gista#gist_openers|.

												*g:gista#close_list_after_open*
g:gista#close_list_after_open
	If it is 1, the gist list window will automatically be closed after a gist
	buffer is opened.
	The default value is 0.

											*g:gista#auto_connect_after_post*
g:gista#auto_connect_after_post
	Automatically connect the buffer to the corresponding gist when after the
	buffer content is posted.
	The default value is 1.

													*g:gista#update_on_write*
g:gista#update_on_write
	If it is 2, the gist will be updated with ':w!' command.
	If it is 1, the gist will be updated with ':w' command.
	If it is 0, the gist never be updated with autocmd.
	The default value is 2.

											*g:gista#enable_default_keymaps*
g:gista#enable_default_keymaps
	Enable the default keymaps in the gist list window.
	The default keymap will be defined in gist list window as listed below
>
		nmap <buffer> <F1>       :<C-u>help vim-gista-default-mappings<CR>
		nmap <buffer> <C-l>      <Plug>(gista-action-update)
		nmap <buffer> <C-l><C-l> <Plug>(gista-action-update-nocache)
		nmap <buffer> r          <Plug>(gista-action-rename)
		nmap <buffer> D          <Plug>(gista-action-smart-delete)
		nmap <buffer> +          <Plug>(gista-action-star)
		nmap <buffer> -          <Plug>(gista-action-unstar)
		nmap <buffer> ?          <Plug>(gista-action-is-starred)
		nmap <buffer> F          <Plug>(gista-action-fork)
		nmap <buffer> <CR>       <Plug>(gista-action-open)
		nmap <buffer> <S-CR>     <Plug>(gista-action-browse)
		nmap <buffer> e          <Plug>(gista-action-edit)
		nmap <buffer> s          <Plug>(gista-action-split)
		nmap <buffer> v          <Plug>(gista-action-vsplit)
		nmap <buffer> b          <Plug>(gista-action-browse)
<
	The default value is 1.

														*g:gista#post_private*
g:gista#post_private
	If it is 1 then post a gist as a private gist in default.
	The default value is 0.

											*g:gista#interactive_description*
g:gista#interactive_description
	If it is 2, ask user to input a description of gists always.
	If it is 1, ask user to input a description of gists when the gist does
	not have a description.
	If it is 0, never ask user to input a description.
	The default value is 1.

											*g:gista#interactive_visibility*
g:gista#interactive_visibility
	If it is 2, ask user to input a visibility of gists always.
	If it is 1, ask user to input a visibility of gists when the gist does
	not have a publish status (only when posting a new gist).
	If it is 0, never ask user to input a publish status.
	The default value is 1.
	
							*g:gista#include_invisible_buffer_in_multiple*
g:gista#include_invisible_buffer_in_multiple
	Include invisible (hidden) buffers to post when '--multiple' option is
	specified.
	The default value is 0.

------------------------------------------------------------------------------
Commands										*vim-gista-interface-commands*

												*:Gista-list*
:Gista -l [{lookup}] [--page {PAGE}] [--nocache]
:Gista --list [{lookup}] [--page {PAGE}] [--nocache]
	List gist entries of {lookup}. If no {lookup} is specified, a username of
	current authenticated user or |g:gista#github_user| is used.

	It will download gist entries recursively except if '--page' option is
	specified or {lookup} is 'public'.
	If '--page' option is specified, it will download gist entries in {PAGE}.
	If '--nocache' option is specified, it will rebuild the cache.

												*:Gista-open*
:Gista -o [--gistid {gistid}] [--filename {filename}]
:Gista --open [--gistid {gistid}] [--filename {filename}]
	Open a gist specified by {gistid}. If no {gistid} is specified, the
	command try to find it from the current buffer. It use a connected gist id
	if the buffer is connect, otherwise it try to find 'GistID: XXXXXXXX'
	format string in the buffer.

	If no '--filename' is specified, it open all files in the gist. Otherwise
	it open files specified in {filename} as a semi-colon separated filenames.

												*:Gista-post*
:Gista [--gistid {gistid}]
		\ [-p/--private | -P/--public | -a/--anonymous]
		\ [-d/--description {description}]
		\ [--multiple]
:Gista --post [--gistid {gistid}]
		\ [-p/--private | -P/--public | -a/--anonymous]
		\ [-d/--description {description}]
		\ [--multiple]
	Create a new gist or update changes of an existing gists with a current
	buffer.


vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl:noet
